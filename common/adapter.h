/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p adapter.h:adapter.cpp ../xml/adapter.xml
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ADAPTER_H_1350313541
#define ADAPTER_H_1350313541

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.bluez.Adapter
 */
class OrgBluezAdapterInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.bluez.Adapter"; }

public:
    OrgBluezAdapterInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgBluezAdapterInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> ClearBroadcastData()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ClearBroadcastData"), argumentList);
    }

    inline QDBusPendingReply<> RegisterManufacturerObserver(const QDBusObjectPath &observer, ushort match_value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(observer) << QVariant::fromValue(match_value);
        return asyncCallWithArgumentList(QLatin1String("RegisterManufacturerObserver"), argumentList);
    }

    inline QDBusPendingReply<> RegisterServiceObserver(const QDBusObjectPath &observer, ushort match_value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(observer) << QVariant::fromValue(match_value);
        return asyncCallWithArgumentList(QLatin1String("RegisterServiceObserver"), argumentList);
    }

    inline QDBusPendingReply<> SetManufacturerData(ushort company_id, const QByteArray &data)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(company_id) << QVariant::fromValue(data);
        return asyncCallWithArgumentList(QLatin1String("SetManufacturerData"), argumentList);
    }

    inline QDBusPendingReply<> SetServiceData(ushort uuid, const QByteArray &data)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uuid) << QVariant::fromValue(data);
        return asyncCallWithArgumentList(QLatin1String("SetServiceData"), argumentList);
    }

    inline QDBusPendingReply<> UnregisterManufacturerObserver(const QDBusObjectPath &observer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(observer);
        return asyncCallWithArgumentList(QLatin1String("UnregisterManufacturerObserver"), argumentList);
    }

    inline QDBusPendingReply<> UnregisterServiceObserver(const QDBusObjectPath &observer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(observer);
        return asyncCallWithArgumentList(QLatin1String("UnregisterServiceObserver"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace bluez {
    typedef ::OrgBluezAdapterInterface Adapter;
  }
}
#endif
