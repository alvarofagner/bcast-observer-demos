/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p observer.h:observer.cpp ../xml/observer.xml
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef OBSERVER_H_1350313860
#define OBSERVER_H_1350313860

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.bluez.Observer
 */
class OrgBluezObserverInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.bluez.Observer"; }

public:
    OrgBluezObserverInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgBluezObserverInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> ManufacturerReceived(const QString &address, ushort cid, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(address) << QVariant::fromValue(cid) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QLatin1String("ManufacturerReceived"), argumentList);
    }

    inline QDBusPendingReply<> ServiceReceived(const QString &address, ushort uuid, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(address) << QVariant::fromValue(uuid) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QLatin1String("ServiceReceived"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace bluez {
    typedef ::OrgBluezObserverInterface Observer;
  }
}
#endif
